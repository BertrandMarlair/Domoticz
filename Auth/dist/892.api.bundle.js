exports.id=892,exports.ids=[892],exports.modules={18967:e=>{function r(e){var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}r.keys=()=>[],r.resolve=r,r.id=18967,e.exports=r},59388:e=>{function r(e){var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}r.keys=()=>[],r.resolve=r,r.id=59388,e.exports=r},68511:e=>{function r(e){var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}r.keys=()=>[],r.resolve=r,r.id=68511,e.exports=r},88897:(e,r,t)=>{"use strict";t.r(r);var n=t(99268),i=t.n(n),a=t(98605),o=t.n(a),s=t(10046),c=t.n(s),l=t(63395),d=t.n(l),p=t(32589),u=t.n(p),w=t(17846),y=t.n(w),m=t(97280),f=t.n(m),g=t(85622),h=t.n(g),_=t(38137),T=t(34156),b=t.n(T);class E{constructor(){this.store=new Map,this.mems=new Map}memoize(e,...r){this.mems.has(e)||this.mems.set(e,b()(e,{normalizer:e=>JSON.stringify(e)}));const t=this.mems.get(e),n=JSON.stringify(r);return this.store.set(t,this.store.has(t)?[...this.store.get(t),n]:[n]),t(...r)}clear(){Array.from(this.store.entries()).forEach((([e,r])=>r.forEach((r=>e.delete(...JSON.parse(r))))))}}var v=t(49704),k=t(89135),A=t(25144);const O=async e=>{const{PRIVATE_KEY:r,PUBLIC_KEY:t,SECRET_REGISTER:n}=process.env,i={_id:e._id,name:e.name,type:e.type,permissions:e.permissions},a={expiresIn:A.C7,algorithm:"RS256"},o={expiresIn:A.Wt,algorithm:"RS256"},s=await(0,v.sign)(i,{key:r,passphrase:n},a),c=await(0,v.sign)({_id:e._id},{key:r,passphrase:n},o);return(0,v.verify)(s,t,{algorithms:["RS256"]}),{accessToken:s,refreshToken:c}},U=async({token:e})=>{if(!e)throw new k.AuthenticationError("You must supply a JWT for authorization.");const{PUBLIC_KEY:r}=process.env;try{return(0,v.verify)(e,r,{algorithm:["RS256"]})}catch(e){throw console.log("err",e),new k.AuthenticationError("Invalid JWT")}};var S=t(96047);const q=(0,S.scalarType)({name:"Email",asNexusMethod:"email",description:"Email custom scalar type",Email:(...e)=>GraphQLEmail(...e)});var D=t(68303);const N=(0,S.scalarType)({name:"Json",asNexusMethod:"json",description:"Json custom scalar type",JSON:D.ZP,JSONObject:D.C1}),I={scalar:[q,(0,S.scalarType)({name:"Timestamp",asNexusMethod:"timestamp",description:"Unix Milliseconds Timestamp",serialize(e){if(isNaN(e))throw new Error("Timestamp isn't a valid timestamp value");return new Date(e).getTime()},parseValue(e){if(isNaN(parseFloat(e)))throw new Error("Timestamp isn't a valid timestamp value");return new Date(parseFloat(e)).getTime()},parseLiteral({value:e}){return new Date(this.parseValue(e)).getTime()}}),N],input:[(0,S.objectType)({name:"Delete",definition(e){e.int("id")}}),(0,S.objectType)({name:"Status",definition(e){e.string("title"),e.field("code",{type:"String",resolve:({statusCode:e})=>e}),e.string("color")}})]},P=(0,S.enumType)({name:"LogicalOperator",members:["and","or"],description:"LogicalOperator for filterate"}),R=(0,S.inputObjectType)({name:"Filter",definition(e){e.string("operator"),e.list.string("values"),e.field("inner_stack_operator",{type:P})}}),x=(0,S.inputObjectType)({name:"FilterOperation",definition(e){e.field("inner_stack_operator",{type:P}),e.string("key",{nullable:!1}),e.list.field("filters",{type:R,nullable:!1})}}),C=(0,S.objectType)({name:"AvailableFilter",definition(e){e.string("label",{nullable:!1}),e.string("key",{nullable:!1}),e.string("type",{nullable:!1}),e.string("formType",{nullable:!1}),e.list.string("valid_operators",{nullable:!1})}}),j=(0,S.enumType)({name:"Order",members:["DESC","ASC"],description:"Order for filterate"}),M=(0,S.inputObjectType)({name:"PaginationParams",definition(e){e.int("page"),e.int("pageSize"),e.string("orderKey"),e.field("orderValue",{type:j})}}),L=(0,S.inputObjectType)({name:"Pagination",definition(e){e.list.field("filtrate",{type:x,nullable:!1}),e.field("pagination",{type:M})}}),F={enum:[P,j],input:[R,x,L,M],type:[C]},$=(0,S.enumType)({name:"TypeEnum",members:["user","device"],description:"Type for user"}),B=(0,S.inputObjectType)({name:"registerInput",definition(e){e.string("name",{required:!0}),e.string("type",{required:!0,type:$}),e.string("password",{required:!0}),e.string("passwordConfirmation",{required:!0})}}),H=(0,S.enumType)({name:"PermissionEnum",members:["guest","member","admin"],description:"Permission for user"}),J=(0,S.objectType)({name:"Basic",definition(e){e.boolean("verified",{nullable:!1}),e.timestamp("lastLogin",{nullable:!0})}}),z=(0,S.objectType)({name:"UserAuth",definition(e){e.field("_id",{type:"ID"}),e.string("name",{nullable:!1}),e.string("type",{nullable:!1,type:$}),e.boolean("active",{nullable:!1}),e.string("permission",{nullable:!1,type:H}),e.field("basic",{type:J}),e.timestamp("updatedAt"),e.timestamp("createdAt")}}),K=(0,S.objectType)({name:"Login",definition(e){e.field("identity",{type:z,nullable:!0}),e.string("accessToken",{nullable:!0}),e.string("refreshToken",{nullable:!0})}});var G=t(20501);const Y={reconnectTries:30,reconnectInterval:500,poolSize:10,bufferMaxEntries:0,useNewUrlParser:!0,useUnifiedTopology:!0},{MONGO_AUTH_HOSTNAME:V,MONGO_AUTH_NAME:Q,MONGO_AUTH_PORT:W}=process.env,X=async()=>{try{const e=G.MongoClient.connect(`mongodb://${V}:${W}`,Y);return await e.then((e=>e.db(Q))).catch((e=>{console.log(e)}))||{error:"Impossible to connect to the database"}}catch(e){return{error:e.message}}},Z=async(e,r)=>{const t=await X();return await t.collection(e).findOne(r)},ee=async(e,r,t)=>await(async(e,r,t)=>{const n=await X();return(await n.collection(e).findOneAndUpdate(r,t,{returnOriginal:!1})).value})(e,{_id:new G.ObjectId(r)},t),re=async e=>await(async(e,r)=>await Z(e,{_id:new G.ObjectId(r)}))(se,e),te=async e=>await Z(se,{name:e}),ne=async(e,r)=>await ee(se,e,r);var ie=t(10858),ae=t.n(ie);const oe=async()=>await(async(e,r)=>{const t=await X();return await t.collection(e).find(r).toArray()})("users",{}),se="users",ce={type:[z,K],mutation:[e=>e.field("signin",{type:z,args:{user:B},resolve:async(...e)=>await(async(e,{user:r})=>{try{if(await te(r.name))throw new _.AuthenticationError("connect.signin.errors.alreadyRegistered");if(r?.password!==r?.passwordConfirmation)throw new _.AuthenticationError("auth.identity.invalidPasswordConfirmation");if(r?.password.length<8)throw new _.AuthenticationError("error.validation.passwordIsTooSmall");const e=await ae().hash(r.password,A.i7),t=await(async(e,r)=>{const t=await X();return(await t.collection("users").insertOne(r)).ops[0]})(0,{name:r.name,type:r.type,active:!0,permission:"guest",basic:{verified:!1,password:e,createdAt:new Date},createdAt:new Date,updatedAt:new Date});if(t&&t._id)return t;throw new Error("connect.register.failedToCreateOnPortal")}catch(e){throw new _.ForbiddenError(e)}})(...e)}),e=>e.field("login",{type:K,args:{name:(0,S.stringArg)({required:!0}),password:(0,S.stringArg)({required:!0})},resolve:async(...e)=>await(async(e,{name:r,password:t})=>{try{const e=await te(r);if(!e)throw new Error("connect.login.errors.failLogin");if(!e.basic.verified)throw new Error("connect.login.errors.unverified");if(!e.active)throw new Error("connect.login.errors.locked");if(e?.basic?.signTry?.[A.Ih]&&new Date(e?.basic?.signTry[0]).getTime()>(new Date).getTime()-A.no)throw await ne(e._id,{$pull:{"basic.signTry":{$lt:new Date((new Date).getTime()-A.no)}}}),new Error("connect.login.errors.tooManyTry");if(!await ae().compare(t,e.basic.password))throw await ne(e._id,{$push:{"basic.signTry":new Date}}),new Error("connect.login.errors.failLogin");const n=await ne(e._id,{$set:{"basic.lastLogin":new Date,"basic.signTry":[],updatedAt:new Date}}),{accessToken:i,refreshToken:a}=await O(e);if(n?._id)return{accessToken:i,refreshToken:a,identity:{...n}};throw new Error("connect.login.errors.failLogin")}catch(e){throw new _.ForbiddenError(e)}})(...e)}),e=>e.field("updateUser",{type:z,args:{name:(0,S.stringArg)({required:!0}),type:(0,S.arg)({type:$,required:!0})},resolve:async(...e)=>await(async(e,{name:r,type:t},{currentUser:n})=>{try{const e=await re(n._id);if(!e?._id)throw new _.AuthenticationError("connect.updateUser.errors.notFound");const i=await ee("users",e._id,{$set:{name:r,type:t}});if(i&&i._id)return i;throw new Error("connect.updateUser.updateUser")}catch(e){throw new _.ForbiddenError(e)}})(...e)}),e=>e.field("deleteUser",{type:z,args:{_id:(0,S.idArg)({required:!0}),name:(0,S.stringArg)({required:!0})},resolve:async(...e)=>await(async(e,{_id:r,name:t})=>{const n=await re(r);if(!n)throw new Error("contexttest.deleteBlock.errors.noBlockFound");if(n.name!=t)throw new Error("contexttest.deleteBlock.errors.notsamename");return await(async(e,r)=>{const t=await X();return await t.collection(e).deleteOne({_id:new G.ObjectId(r)})})(se,r),console.log("------blockToDelete-------"),console.log(n),n})(...e)}),e=>e.field("editUser",{type:z,args:{_id:(0,S.idArg)({required:!0}),name:(0,S.stringArg)({required:!0}),active:(0,S.booleanArg)({required:!0}),verified:(0,S.booleanArg)({required:!0})},resolve:async(...e)=>await(async(e,{_id:r,name:t,active:n,verified:i})=>{if(t.length<2)throw new Error("error.validation.nameIsTooSmall");const a=await te(t);if(a&&a._id!=r)throw new Error("alreadyRegistered");if(!await re(r))throw new Error("noUserFound");const o=await ee(se,r,{$set:{name:t,active:n,basic:{verified:i}}});if(o&&o._id)return o;throw new Error("failedToEditUser")})(...e)}),e=>e.field("resetUserPwd",{type:z,args:{_id:(0,S.idArg)({required:!0}),password:(0,S.stringArg)({required:!0}),passwordConfirmation:(0,S.stringArg)({required:!0})},resolve:async(...e)=>await(async(e,{_id:r,password:t,passwordConfirmation:n})=>{if(t!==n)throw new Error("auth.identity.invalidPasswordConfirmation");if(t.length<8)throw new Error("error.validation.passwordIsTooSmall");const i=await ae().hash(t,A.i7),a=await re(r),o=await ee(se,r,{$set:{basic:{password:i,verified:a.basic.verified}}});if(o&&o._id)return o;throw new Error("failedToEditPassword")})(...e)}),e=>e.field("accountTypeUpdate",{type:z,args:{_id:(0,S.idArg)({required:!0}),type:(0,S.stringArg)({required:!0,type:$})},resolve:async(...e)=>await(async(e,{_id:r,type:t})=>{if(!await re(r))throw new Error("noUserFound");const n=await ee(se,r,{$set:{type:t}});if(n&&n._id)return n;throw new Error("failedToEditUser")})(...e)})],query:[e=>e.field("getCurrentUser",{type:z,nullable:!1,async resolve(e,r,{currentUser:t}){const n=await re(t._id);if(!n)throw new _.AuthenticationError("fail to found user");return n}}),e=>e.field("checkAuthUser",{type:z,nullable:!1,async resolve(e,r,{token:t,currentUser:n}){if(!t)throw new _.AuthenticationError("jwt not exist");if(!await U({token:t.replace("Bearer ","")}))throw new _.AuthenticationError("invalid jwt");const i=await re(n._id);if(console.log("authUser",i),!i)throw new _.AuthenticationError("fail to found user");if(!i.basic.verified)throw new Error("connect.login.errors.unverified");if(!i.active)throw new Error("connect.login.errors.locked");return i}}),e=>e.list.field("getAllUsers",{type:z,nullable:!0,resolve:async(...e)=>await oe(...e)}),e=>e.field("getUserById",{type:z,nullable:!1,args:{_id:(0,S.idArg)({required:!0})},resolve:async(e,r)=>(console.log(r),await re(r._id))})],input:[B],enum:[$]},le=(0,S.objectType)({name:"KeyRing",definition(e){e.string("accessPublicKey",{nullable:!1})}}),de=(0,S.objectType)({name:"TokensType",definition(e){e.string("accessToken",{nullable:!1}),e.string("refreshToken",{nullable:!1})}}),pe=[I,F,ce,{type:[le,de],query:[e=>e.field("keyRing",{type:le,args:{token:(0,S.stringArg)({required:!0})},nullable:!1,async resolve(e,{token:r}){const{SECRET_REGISTER:t,PUBLIC_KEY:n}=process.env;if(r===t)return{accessPublicKey:n};throw new Error("Invalid secret")}}),e=>e.field("refreshTokens",{type:de,nullable:!1,async resolve(e,r,{refreshToken:t}){if(!t)throw new Error("missing refresh-token");const{_id:n}=(0,v.decode)(t.replace("Bearer ","")),i=await re(n);if(!i)throw new Error("fail to get user data");const{accessToken:a,refreshToken:o}=await O(i);return{accessToken:a,refreshToken:o}}})]}],{GRAPHQL_QUERY_MAX_DEPTH:ue}=process.env,we=(e,{context:r})=>(r.memoizer.clear(),e),ye=e=>(console.log("_________________________________"),console.log(e),console.log("_________________________________"),e),me=(0,S.makeSchema)({types:[(fe=pe,(0,S.queryType)({definition(e){fe.forEach((r=>{r.query&&r.query.forEach((r=>{r(e)}))}))}})),(e=>e.map((e=>e.type)))(pe),(e=>(0,S.mutationType)({definition(r){e.forEach((e=>{e.mutation&&e.mutation.forEach((e=>{e(r)}))}))}}))(pe),(e=>e.map((e=>e.subscription)))(pe),(e=>e.map((e=>e.scalar)))(pe),(e=>e.map((e=>e.input)))(pe),(e=>e.map((e=>e.enum)))(pe),(e=>e.map((e=>e.union)))(pe)],outputs:{schema:h().join(__dirname.replace(/\/dist$/,"/bin"),"../../bin/portal_api_schema.graphql"),typegen:h().join(__dirname.replace(/\/dist$/,"/bin"),"../../bin/portal_api_schema_typegen.ts")}});var fe;var ge=t(54005),he=t.n(ge);const{REDIS_HOST:_e,REDIS_PORT:Te}=process.env;var be=t(95692);const Ee=d()(),ve=i()(),ke=o().createServer(ve),{AUTH_HOST:Ae,AUTH_PORT:Oe,NODE_ENV:Ue}=process.env;ve.use(y()({origin:"*",credentials:!0})),ve.use(c().text({type:"application/graphql"})),Ee.start("Starting server..."),[{path:"/health",controller:async(e,r)=>{try{return r.status(200).send("Health check success")}catch(e){return r.status(400).send(e.message)}},type:"post"}].forEach((e=>{ve.post(e.path,((r,t)=>{e.controller(r,t)}))})),console.log("init");const Se=async()=>{try{const e=((e,r=!0)=>new _.ApolloServer({schema:me,validationRules:[f()(ue)],playground:r,introspection:!0,tracing:!0,formatError:ye,formatResponse:we,context:e=>(async e=>{let r,t;const n=e.req&&e.req.headers,i=e.connection&&e.connection.context;if(n){const e=n["access-token"];e&&"null"!==e&&"undefined"!==e&&(r=e.replace("Bearer ",""),t=await U({token:r}))}if(i&&i&&i.headers.context){const e=i.headers.context,n=e.token||e["access-token"];n&&(r=n.replace("Bearer ",""),t=await U({token:r}))}return{headers:n,memoizer:new E,token:r,identityEmail:t&&t.identity_email,currentUser:t,refreshToken:n["refresh-token"]}})(e),subscriptions:{onConnect:async e=>{if(e&&e.headers.context){const r=e.headers.context;if(r.token||r["access-token"])return e}throw new Error("Missing auth token!")}}}))();e.installSubscriptionHandlers(ke),e.applyMiddleware({app:ve,path:"/"}),new(he())(Te,_e).publish("updateServer","Restart Portal API"),ke.listen(Oe,(()=>{Ee.succeed(),console.log(u().green("✓"),`Server ready. -> start on ${Ae}:${Oe}/`)}))}catch(e){Ee.fail(),await(0,be.Dc)(5e3),console.log("💣",e.message),console.log("💣","reconnecting in 5 seconds"),Se()}};Se(),ke.on("error",(e=>{Ee.fail(),console.log(e),console.log("💣",u().red("error:"),e.message)}))}};