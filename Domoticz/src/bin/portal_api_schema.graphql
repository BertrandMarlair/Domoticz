### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Application {
  _id: ID!
  description: String!
  title: String!
}

type Block {
  _id: ID!
  description: String!
  title: String!
}

type Delete {
  id: Int!
}

"""Email custom scalar type"""
scalar Email

"""Json custom scalar type"""
scalar Json

type Mutation {
  createBlock(block: createBlockInput!): Block!
  createProvider(provider: createProviderInput!): Provider!
  deleteBlock(_id: ID!): Block!
  deleteProvider(_id: ID!): Provider!
  editApplication: Application!
  editBlock(block: editBlockInput!): Block!
  editGroupState(bridgeId: ID!, groupId: ID!, state: PhilipsHueStateInput!): PhilipsHue!
  editGroupStateWhitoutSync(bridgeId: ID!, groupId: ID!, state: PhilipsHueStateInput!): Response!
  editLightState(bridgeId: ID!, lightId: ID!, state: PhilipsHueStateInput!): PhilipsHue!
  editLightStateWhitoutSync(bridgeId: ID!, lightId: ID!, state: PhilipsHueStateInput!): Response!
  editProvider(provider: editProviderInput!): Provider!
  editTest: Test!
  updateWeatherLocation(city: String!, country: String!): Weather!
}

type PhilipsHue {
  _id: ID!
  bridges: [PhilipsHueBridge!]!
  description: String!
  title: String!
}

type PhilipsHueBridge {
  _id: ID!
  config: PhilipsHueBridgeDetailsType!
  groups: [PhilipsHueGroups!]!
  ipAddress: String!
  lights: [PhilipsHueLight!]!
  providerId: ID!
  token: String
}

type PhilipsHueBridgeDetailsType {
  apiversion: String!
  bridgeid: String!
  datastoreversion: String!
  factorynew: Boolean!
  mac: String!
  modelid: String!
  name: String!
  replacesbridgeid: String
  starterkitid: String!
  swversion: String!
}

type PhilipsHueBridgeStatus {
  bridgeId: String
  error: String
  ok: Boolean!
}

type PhilipsHueGroups {
  bridgeId: ID!
  class: String
  groupId: ID!
  lights: [PhilipsHueLight!]!
  name: String!
  recycle: Boolean!
  scenes: [philipsHueScene!]!
  state: PhilipsHueGroupsState!
  type: String!
}

type PhilipsHueGroupsState {
  all_on: Boolean!
  any_on: Boolean!
}

type PhilipsHueLight {
  bridgeId: ID!
  lightId: ID!
  manufacturername: String!
  modelid: String!
  name: String!
  productid: String!
  productname: String!
  state: PhilipsHueLightState!
  swconfigid: String!
  swversion: String!
  type: String!
  uniqueid: String!
}

type PhilipsHueLightState {
  alert: String!
  bri: Int!
  colormode: String!
  ct: Int!
  effect: String
  hue: Int
  mode: String!
  on: Boolean!
  reachable: Boolean!
  sat: Int
  xy: PhilipsHueLightXY!
}

type PhilipsHueLightXY {
  x: Float
  y: Float
}

type PhilipsHueSceneLightState {
  bri: Int!
  bridgeId: ID!
  ct: Int
  lightId: ID!
  on: Boolean!
  xy: PhilipsHueLightXY!
}

type PhilipsHueSensor {
  manufacturername: String!
  modelid: String!
  name: String!
  recycle: Boolean!
  swversion: String!
  type: String!
  uniqueid: String!
}

input PhilipsHueStateInput {
  bri: Int
  hue: Int
  on: Boolean
  sat: Int
  scene: String
  xy: [Float!]
}

type Provider {
  _id: ID!
  button: String!
  description: String!
  icon: String!
  slug: String!
  title: String!
}

type Query {
  getAllApplications: [Application!]
  getAllBlocks: [Block!]
  getAllProviders: [Provider!]
  getAllTests: [Test!]
  getPhilipsHueDevices: PhilipsHue
  getScenesByGroup(bridgeId: ID!, groupId: ID!): [philipsHueScene!]
  getWeatherInfo: Weather
  hueBridgeConnection(ipAddress: String!): PhilipsHueBridgeStatus
  hueBridgeRegister(ipAddress: String!, name: String!): PhilipsHueBridgeStatus
  syncAll: SyncAll
}

type Response {
  error: String
  ok: Boolean!
}

type Status {
  code: String!
  color: String!
  title: String!
}

type Subscription {
  syncAll: SyncAll!
  syncWeather: Weather!
}

type SyncAll {
  philipsHue: PhilipsHue!
}

type Test {
  _id: ID!
  description: String!
  title: String!
}

"""Unix Milliseconds Timestamp"""
scalar Timestamp

type Weather {
  _id: ID!
  city: String!
  clouds: Float!
  country: String!
  description: String!
  dt: Float!
  feels_like: Float!
  humidity: Float!
  icon: String!
  main: String!
  pressure: Float!
  temp: Float!
  temp_max: Float!
  temp_min: Float!
  visibility: Float!
  wind: Float!
}

input createBlockInput {
  description: String
  title: String!
}

input createProviderInput {
  button: String!
  description: String!
  icon: String!
  slug: String!
  title: String!
}

input editBlockInput {
  description: String
  id: String!
  title: String!
}

input editProviderInput {
  _id: ID!
  button: String!
  description: String!
  icon: String!
  slug: String!
  title: String!
}

type philipsHueScene {
  bridgeId: ID!
  group: String!
  lights: [PhilipsHueLight!]!
  lightstates: [PhilipsHueSceneLightState!]!
  name: String!
  sceneId: ID!
  type: String!
}
