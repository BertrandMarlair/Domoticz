/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */


import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    email<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Email";
    timestamp<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Timestamp";
    json<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Json";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    email<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Email";
    timestamp<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Timestamp";
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Json";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  PhilipsHueStateInput: { // input type
    bri?: number | null; // Int
    ct?: number | null; // Int
    hue?: number | null; // Int
    on?: boolean | null; // Boolean
    sat?: number | null; // Int
    scene?: string | null; // String
    xy?: number[] | null; // [Float!]
  }
  createBlockInput: { // input type
    description?: string | null; // String
    title: string; // String!
  }
  createProviderInput: { // input type
    button: string; // String!
    description: string; // String!
    icon: string; // String!
    slug: string; // String!
    title: string; // String!
  }
  editBlockInput: { // input type
    description?: string | null; // String
    id: string; // String!
    title: string; // String!
  }
  editProviderInput: { // input type
    _id: string; // ID!
    button: string; // String!
    description: string; // String!
    icon: string; // String!
    slug: string; // String!
    title: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Application: { // root type
    _id: string; // ID!
    description: string; // String!
    title: string; // String!
  }
  Block: { // root type
    _id: string; // ID!
    description: string; // String!
    title: string; // String!
  }
  Delete: { // root type
    id: number; // Int!
  }
  Mutation: {};
  PhilipsHue: { // root type
    _id: string; // ID!
    description: string; // String!
    title: string; // String!
  }
  PhilipsHueBridge: { // root type
    _id: string; // ID!
    config: NexusGenRootTypes['PhilipsHueBridgeDetailsType']; // PhilipsHueBridgeDetailsType!
    ipAddress: string; // String!
    name: string; // String!
    providerId: string; // ID!
    token?: string | null; // String
  }
  PhilipsHueBridgeDetailsType: { // root type
    apiversion: string; // String!
    bridgeid: string; // String!
    datastoreversion: string; // String!
    factorynew: boolean; // Boolean!
    mac: string; // String!
    modelid: string; // String!
    name: string; // String!
    replacesbridgeid?: string | null; // String
    starterkitid: string; // String!
    swversion: string; // String!
  }
  PhilipsHueBridgeStatus: { // root type
    bridgeId?: string | null; // String
    error?: string | null; // String
    ok: boolean; // Boolean!
  }
  PhilipsHueGroups: { // root type
    bridgeId: string; // ID!
    class?: string | null; // String
    groupId: string; // ID!
    name: string; // String!
    recycle: boolean; // Boolean!
    state: NexusGenRootTypes['PhilipsHueGroupsState']; // PhilipsHueGroupsState!
    type: string; // String!
  }
  PhilipsHueGroupsState: { // root type
    all_on: boolean; // Boolean!
    any_on: boolean; // Boolean!
  }
  PhilipsHueLight: { // root type
    bridgeId: string; // ID!
    lightId: string; // ID!
    manufacturername: string; // String!
    modelid: string; // String!
    name: string; // String!
    productid: string; // String!
    productname: string; // String!
    state: NexusGenRootTypes['PhilipsHueLightState']; // PhilipsHueLightState!
    swconfigid: string; // String!
    swversion: string; // String!
    type: string; // String!
    uniqueid: string; // String!
  }
  PhilipsHueLightState: { // root type
    alert: string; // String!
    bri: number; // Int!
    colormode: string; // String!
    ct: number; // Int!
    effect?: string | null; // String
    hue?: number | null; // Int
    mode: string; // String!
    on: boolean; // Boolean!
    reachable: boolean; // Boolean!
    sat?: number | null; // Int
  }
  PhilipsHueLightXY: { // root type
    x?: number | null; // Float
    y?: number | null; // Float
  }
  PhilipsHueSceneLightState: { // root type
    bri: number; // Int!
    bridgeId: string; // ID!
    ct?: number | null; // Int
    lightId: string; // ID!
    on: boolean; // Boolean!
  }
  PhilipsHueSensor: { // root type
    manufacturername: string; // String!
    modelid: string; // String!
    name: string; // String!
    recycle: boolean; // Boolean!
    swversion: string; // String!
    type: string; // String!
    uniqueid: string; // String!
  }
  Provider: { // root type
    _id: string; // ID!
    button: string; // String!
    description: string; // String!
    icon: string; // String!
    slug: string; // String!
    title: string; // String!
  }
  Query: {};
  Response: { // root type
    error?: string | null; // String
    ok: boolean; // Boolean!
  }
  Status: { // root type
    color: string; // String!
    title: string; // String!
  }
  Subscription: {};
  SyncAll: {};
  Test: { // root type
    _id: string; // ID!
    description: string; // String!
    title: string; // String!
  }
  Weather: { // root type
    _id: string; // ID!
    city: string; // String!
    country: string; // String!
    dt: number; // Float!
    visibility: number; // Float!
  }
  philipsHueScene: { // root type
    bridgeId: string; // ID!
    group: string; // String!
    name: string; // String!
    sceneId: string; // ID!
    type: string; // String!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Email: any;
  Json: any;
  Timestamp: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  PhilipsHueStateInput: NexusGenInputs['PhilipsHueStateInput'];
  createBlockInput: NexusGenInputs['createBlockInput'];
  createProviderInput: NexusGenInputs['createProviderInput'];
  editBlockInput: NexusGenInputs['editBlockInput'];
  editProviderInput: NexusGenInputs['editProviderInput'];
}

export interface NexusGenFieldTypes {
  Application: { // field return type
    _id: string; // ID!
    description: string; // String!
    title: string; // String!
  }
  Block: { // field return type
    _id: string; // ID!
    description: string; // String!
    title: string; // String!
  }
  Delete: { // field return type
    id: number; // Int!
  }
  Mutation: { // field return type
    addGroup: NexusGenRootTypes['PhilipsHue']; // PhilipsHue!
    createBlock: NexusGenRootTypes['Block']; // Block!
    createProvider: NexusGenRootTypes['Provider']; // Provider!
    deleteBlock: NexusGenRootTypes['Block']; // Block!
    deleteBridge: NexusGenRootTypes['PhilipsHue']; // PhilipsHue!
    deleteGroup: NexusGenRootTypes['PhilipsHue']; // PhilipsHue!
    deleteProvider: NexusGenRootTypes['Provider']; // Provider!
    editApplication: NexusGenRootTypes['Application']; // Application!
    editBlock: NexusGenRootTypes['Block']; // Block!
    editBridgeName: NexusGenRootTypes['PhilipsHue']; // PhilipsHue!
    editGroupConfig: NexusGenRootTypes['PhilipsHue']; // PhilipsHue!
    editGroupState: NexusGenRootTypes['PhilipsHue']; // PhilipsHue!
    editGroupStateWhitoutSync: NexusGenRootTypes['Response']; // Response!
    editLightState: NexusGenRootTypes['PhilipsHue']; // PhilipsHue!
    editLightStateWhitoutSync: NexusGenRootTypes['Response']; // Response!
    editProvider: NexusGenRootTypes['Provider']; // Provider!
    editTest: NexusGenRootTypes['Test']; // Test!
    updateWeatherLocation: NexusGenRootTypes['Weather']; // Weather!
  }
  PhilipsHue: { // field return type
    _id: string; // ID!
    bridges: NexusGenRootTypes['PhilipsHueBridge'][]; // [PhilipsHueBridge!]!
    description: string; // String!
    title: string; // String!
  }
  PhilipsHueBridge: { // field return type
    _id: string; // ID!
    config: NexusGenRootTypes['PhilipsHueBridgeDetailsType']; // PhilipsHueBridgeDetailsType!
    groups: NexusGenRootTypes['PhilipsHueGroups'][]; // [PhilipsHueGroups!]!
    ipAddress: string; // String!
    lights: NexusGenRootTypes['PhilipsHueLight'][]; // [PhilipsHueLight!]!
    name: string; // String!
    providerId: string; // ID!
    token: string | null; // String
  }
  PhilipsHueBridgeDetailsType: { // field return type
    apiversion: string; // String!
    bridgeid: string; // String!
    datastoreversion: string; // String!
    factorynew: boolean; // Boolean!
    mac: string; // String!
    modelid: string; // String!
    name: string; // String!
    replacesbridgeid: string | null; // String
    starterkitid: string; // String!
    swversion: string; // String!
  }
  PhilipsHueBridgeStatus: { // field return type
    bridgeId: string | null; // String
    error: string | null; // String
    ok: boolean; // Boolean!
  }
  PhilipsHueGroups: { // field return type
    bridgeId: string; // ID!
    class: string | null; // String
    groupId: string; // ID!
    lights: NexusGenRootTypes['PhilipsHueLight'][]; // [PhilipsHueLight!]!
    name: string; // String!
    recycle: boolean; // Boolean!
    scenes: NexusGenRootTypes['philipsHueScene'][]; // [philipsHueScene!]!
    state: NexusGenRootTypes['PhilipsHueGroupsState']; // PhilipsHueGroupsState!
    type: string; // String!
  }
  PhilipsHueGroupsState: { // field return type
    all_on: boolean; // Boolean!
    any_on: boolean; // Boolean!
  }
  PhilipsHueLight: { // field return type
    bridgeId: string; // ID!
    lightId: string; // ID!
    manufacturername: string; // String!
    modelid: string; // String!
    name: string; // String!
    productid: string; // String!
    productname: string; // String!
    state: NexusGenRootTypes['PhilipsHueLightState']; // PhilipsHueLightState!
    swconfigid: string; // String!
    swversion: string; // String!
    type: string; // String!
    uniqueid: string; // String!
  }
  PhilipsHueLightState: { // field return type
    alert: string; // String!
    bri: number; // Int!
    colormode: string; // String!
    ct: number; // Int!
    effect: string | null; // String
    hue: number | null; // Int
    mode: string; // String!
    on: boolean; // Boolean!
    reachable: boolean; // Boolean!
    sat: number | null; // Int
    xy: NexusGenRootTypes['PhilipsHueLightXY']; // PhilipsHueLightXY!
  }
  PhilipsHueLightXY: { // field return type
    x: number | null; // Float
    y: number | null; // Float
  }
  PhilipsHueSceneLightState: { // field return type
    bri: number; // Int!
    bridgeId: string; // ID!
    ct: number | null; // Int
    lightId: string; // ID!
    on: boolean; // Boolean!
    xy: NexusGenRootTypes['PhilipsHueLightXY']; // PhilipsHueLightXY!
  }
  PhilipsHueSensor: { // field return type
    manufacturername: string; // String!
    modelid: string; // String!
    name: string; // String!
    recycle: boolean; // Boolean!
    swversion: string; // String!
    type: string; // String!
    uniqueid: string; // String!
  }
  Provider: { // field return type
    _id: string; // ID!
    button: string; // String!
    description: string; // String!
    icon: string; // String!
    slug: string; // String!
    title: string; // String!
  }
  Query: { // field return type
    getAllApplications: NexusGenRootTypes['Application'][] | null; // [Application!]
    getAllBlocks: NexusGenRootTypes['Block'][] | null; // [Block!]
    getAllProviders: NexusGenRootTypes['Provider'][] | null; // [Provider!]
    getAllTests: NexusGenRootTypes['Test'][] | null; // [Test!]
    getPhilipsHueDevices: NexusGenRootTypes['PhilipsHue'] | null; // PhilipsHue
    getScenesByGroup: NexusGenRootTypes['philipsHueScene'][] | null; // [philipsHueScene!]
    getWeatherInfo: NexusGenRootTypes['Weather'] | null; // Weather
    hueBridgeAddConnection: NexusGenRootTypes['PhilipsHueBridgeStatus'] | null; // PhilipsHueBridgeStatus
    hueBridgeConnection: NexusGenRootTypes['PhilipsHueBridgeStatus'] | null; // PhilipsHueBridgeStatus
    hueBridgeRegister: NexusGenRootTypes['PhilipsHueBridgeStatus'] | null; // PhilipsHueBridgeStatus
    syncAll: NexusGenRootTypes['SyncAll'] | null; // SyncAll
  }
  Response: { // field return type
    error: string | null; // String
    ok: boolean; // Boolean!
  }
  Status: { // field return type
    code: string; // String!
    color: string; // String!
    title: string; // String!
  }
  Subscription: { // field return type
    syncAll: NexusGenRootTypes['SyncAll']; // SyncAll!
    syncWeather: NexusGenRootTypes['Weather']; // Weather!
  }
  SyncAll: { // field return type
    philipsHue: NexusGenRootTypes['PhilipsHue']; // PhilipsHue!
  }
  Test: { // field return type
    _id: string; // ID!
    description: string; // String!
    title: string; // String!
  }
  Weather: { // field return type
    _id: string; // ID!
    city: string; // String!
    clouds: number; // Float!
    country: string; // String!
    description: string; // String!
    dt: number; // Float!
    feels_like: number; // Float!
    humidity: number; // Float!
    icon: string; // String!
    main: string; // String!
    pressure: number; // Float!
    temp: number; // Float!
    temp_max: number; // Float!
    temp_min: number; // Float!
    visibility: number; // Float!
    wind: number; // Float!
  }
  philipsHueScene: { // field return type
    bridgeId: string; // ID!
    group: string; // String!
    lights: NexusGenRootTypes['PhilipsHueLight'][]; // [PhilipsHueLight!]!
    lightstates: NexusGenRootTypes['PhilipsHueSceneLightState'][]; // [PhilipsHueSceneLightState!]!
    name: string; // String!
    sceneId: string; // ID!
    type: string; // String!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addGroup: { // args
      bridgeId: string; // ID!
      class: string; // String!
      lights: string[]; // [ID!]!
      name: string; // String!
    }
    createBlock: { // args
      block: NexusGenInputs['createBlockInput']; // createBlockInput!
    }
    createProvider: { // args
      provider: NexusGenInputs['createProviderInput']; // createProviderInput!
    }
    deleteBlock: { // args
      _id: string; // ID!
    }
    deleteBridge: { // args
      bridgeId: string; // ID!
    }
    deleteGroup: { // args
      bridgeId: string; // ID!
      groupId: string; // ID!
    }
    deleteProvider: { // args
      _id: string; // ID!
    }
    editBlock: { // args
      block: NexusGenInputs['editBlockInput']; // editBlockInput!
    }
    editBridgeName: { // args
      bridgeId: string; // ID!
      name: string; // String!
    }
    editGroupConfig: { // args
      bridgeId: string; // ID!
      class: string; // String!
      groupId: string; // ID!
      lights: string[]; // [ID!]!
      name: string; // String!
    }
    editGroupState: { // args
      bridgeId: string; // ID!
      groupId: string; // ID!
      state: NexusGenInputs['PhilipsHueStateInput']; // PhilipsHueStateInput!
    }
    editGroupStateWhitoutSync: { // args
      bridgeId: string; // ID!
      groupId: string; // ID!
      state: NexusGenInputs['PhilipsHueStateInput']; // PhilipsHueStateInput!
    }
    editLightState: { // args
      bridgeId: string; // ID!
      lightId: string; // ID!
      state: NexusGenInputs['PhilipsHueStateInput']; // PhilipsHueStateInput!
    }
    editLightStateWhitoutSync: { // args
      bridgeId: string; // ID!
      lightId: string; // ID!
      state: NexusGenInputs['PhilipsHueStateInput']; // PhilipsHueStateInput!
    }
    editProvider: { // args
      provider: NexusGenInputs['editProviderInput']; // editProviderInput!
    }
    updateWeatherLocation: { // args
      city: string; // String!
      country: string; // String!
    }
  }
  Query: {
    getScenesByGroup: { // args
      bridgeId: string; // ID!
      groupId: string; // ID!
    }
    hueBridgeAddConnection: { // args
      ipAddress: string; // String!
    }
    hueBridgeConnection: { // args
      ipAddress: string; // String!
    }
    hueBridgeRegister: { // args
      ipAddress: string; // String!
      name: string; // String!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Application" | "Block" | "Delete" | "Mutation" | "PhilipsHue" | "PhilipsHueBridge" | "PhilipsHueBridgeDetailsType" | "PhilipsHueBridgeStatus" | "PhilipsHueGroups" | "PhilipsHueGroupsState" | "PhilipsHueLight" | "PhilipsHueLightState" | "PhilipsHueLightXY" | "PhilipsHueSceneLightState" | "PhilipsHueSensor" | "Provider" | "Query" | "Response" | "Status" | "Subscription" | "SyncAll" | "Test" | "Weather" | "philipsHueScene";

export type NexusGenInputNames = "PhilipsHueStateInput" | "createBlockInput" | "createProviderInput" | "editBlockInput" | "editProviderInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Email" | "Float" | "ID" | "Int" | "Json" | "String" | "Timestamp";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}