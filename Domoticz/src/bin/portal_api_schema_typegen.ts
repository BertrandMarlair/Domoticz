/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */


import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    email<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Email";
    timestamp<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Timestamp";
    json<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Json";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    email<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Email";
    timestamp<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Timestamp";
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Json";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  createBlockInput: { // input type
    description?: string | null; // String
    title: string; // String!
  }
  createProviderInput: { // input type
    button: string; // String!
    description: string; // String!
    icon: string; // String!
    slug: string; // String!
    title: string; // String!
  }
  editBlockInput: { // input type
    description?: string | null; // String
    id: string; // String!
    title: string; // String!
  }
  editProviderInput: { // input type
    _id: string; // ID!
    button: string; // String!
    description: string; // String!
    icon: string; // String!
    slug: string; // String!
    title: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Application: { // root type
    _id: string; // ID!
    description: string; // String!
    title: string; // String!
  }
  Block: { // root type
    _id: string; // ID!
    description: string; // String!
    title: string; // String!
  }
  BridgeStatus: { // root type
    bridgeId?: string | null; // String
    error?: string | null; // String
    ok: boolean; // Boolean!
  }
  Delete: { // root type
    id: number; // Int!
  }
  Mutation: {};
  PhilipsHue: { // root type
    _id: string; // ID!
    description: string; // String!
    title: string; // String!
  }
  PhilipsHueBridge: { // root type
    _id: string; // ID!
    details: NexusGenRootTypes['PhilipsHueBridgeDetails']; // PhilipsHueBridgeDetails!
    ipAddress: string; // String!
    providerId: string; // ID!
    token?: string | null; // String
  }
  PhilipsHueBridgeDetails: { // root type
    apiversion: string; // String!
    bridgeid: string; // String!
    datastoreversion: string; // String!
    factorynew: boolean; // Boolean!
    mac: string; // String!
    modelid: string; // String!
    name: string; // String!
    replacesbridgeid?: string | null; // String
    starterkitid: string; // String!
    swversion: string; // String!
  }
  Provider: { // root type
    _id: string; // ID!
    button: string; // String!
    description: string; // String!
    icon: string; // String!
    slug: string; // String!
    title: string; // String!
  }
  Query: {};
  Status: { // root type
    color: string; // String!
    title: string; // String!
  }
  Test: { // root type
    _id: string; // ID!
    description: string; // String!
    title: string; // String!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Email: any;
  Json: any;
  Timestamp: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  createBlockInput: NexusGenInputs['createBlockInput'];
  createProviderInput: NexusGenInputs['createProviderInput'];
  editBlockInput: NexusGenInputs['editBlockInput'];
  editProviderInput: NexusGenInputs['editProviderInput'];
}

export interface NexusGenFieldTypes {
  Application: { // field return type
    _id: string; // ID!
    description: string; // String!
    title: string; // String!
  }
  Block: { // field return type
    _id: string; // ID!
    description: string; // String!
    title: string; // String!
  }
  BridgeStatus: { // field return type
    bridgeId: string | null; // String
    error: string | null; // String
    ok: boolean; // Boolean!
  }
  Delete: { // field return type
    id: number; // Int!
  }
  Mutation: { // field return type
    createBlock: NexusGenRootTypes['Block']; // Block!
    createProvider: NexusGenRootTypes['Provider']; // Provider!
    deleteProvider: NexusGenRootTypes['Provider']; // Provider!
    editApplication: NexusGenRootTypes['Application']; // Application!
    editBlock: NexusGenRootTypes['Block']; // Block!
    editProvider: NexusGenRootTypes['Provider']; // Provider!
    editTest: NexusGenRootTypes['Test']; // Test!
  }
  PhilipsHue: { // field return type
    _id: string; // ID!
    bridges: NexusGenRootTypes['PhilipsHueBridge'][]; // [PhilipsHueBridge!]!
    description: string; // String!
    title: string; // String!
  }
  PhilipsHueBridge: { // field return type
    _id: string; // ID!
    details: NexusGenRootTypes['PhilipsHueBridgeDetails']; // PhilipsHueBridgeDetails!
    ipAddress: string; // String!
    providerId: string; // ID!
    token: string | null; // String
  }
  PhilipsHueBridgeDetails: { // field return type
    apiversion: string; // String!
    bridgeid: string; // String!
    datastoreversion: string; // String!
    factorynew: boolean; // Boolean!
    mac: string; // String!
    modelid: string; // String!
    name: string; // String!
    replacesbridgeid: string | null; // String
    starterkitid: string; // String!
    swversion: string; // String!
  }
  Provider: { // field return type
    _id: string; // ID!
    button: string; // String!
    description: string; // String!
    icon: string; // String!
    slug: string; // String!
    title: string; // String!
  }
  Query: { // field return type
    getAllApplications: NexusGenRootTypes['Application'][] | null; // [Application!]
    getAllBlocks: NexusGenRootTypes['Block'][] | null; // [Block!]
    getAllProviders: NexusGenRootTypes['Provider'][] | null; // [Provider!]
    getAllTests: NexusGenRootTypes['Test'][] | null; // [Test!]
    getPhilipsHueDevices: NexusGenRootTypes['PhilipsHue'] | null; // PhilipsHue
    hueBridgeConnection: NexusGenRootTypes['BridgeStatus'] | null; // BridgeStatus
    hueBridgeRegister: NexusGenRootTypes['BridgeStatus'] | null; // BridgeStatus
  }
  Status: { // field return type
    code: string; // String!
    color: string; // String!
    title: string; // String!
  }
  Test: { // field return type
    _id: string; // ID!
    description: string; // String!
    title: string; // String!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createBlock: { // args
      block: NexusGenInputs['createBlockInput']; // createBlockInput!
    }
    createProvider: { // args
      provider: NexusGenInputs['createProviderInput']; // createProviderInput!
    }
    deleteProvider: { // args
      _id: string; // ID!
    }
    editBlock: { // args
      block: NexusGenInputs['editBlockInput']; // editBlockInput!
    }
    editProvider: { // args
      provider: NexusGenInputs['editProviderInput']; // editProviderInput!
    }
  }
  Query: {
    hueBridgeConnection: { // args
      ipAddress: string; // String!
    }
    hueBridgeRegister: { // args
      ipAddress: string; // String!
      name: string; // String!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Application" | "Block" | "BridgeStatus" | "Delete" | "Mutation" | "PhilipsHue" | "PhilipsHueBridge" | "PhilipsHueBridgeDetails" | "Provider" | "Query" | "Status" | "Test";

export type NexusGenInputNames = "createBlockInput" | "createProviderInput" | "editBlockInput" | "editProviderInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Email" | "Float" | "ID" | "Int" | "Json" | "String" | "Timestamp";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}